AWSTemplateFormatVersion: '2010-09-09'
Description: EC2 ASG Demo for AWS Observability with ALB and Custom Web Page (Using Default VPC)

Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair for SSH access
    Default: demo-keypair

  DefaultVPC:
    Type: String
    Description: VPC ID to launch resources into
    Default: vpc-026c06be6c8646151

  DefaultSubnets:
    Type: List<String>
    Description: Subnet IDs for ALB and ASG
    Default: "subnet-0315df4a788b739b1,subnet-0772d55fdf0b7113f,subnet-0ff957e3c95a679eb"


Resources:

  WebInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ObservabilityWebRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  WebInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref WebInstanceRole

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP only from ALB
      VpcId: !Ref DefaultVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP access from the internet
      VpcId: !Ref DefaultVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        InstanceType: t3.micro
        IamInstanceProfile:
          Arn: !GetAtt WebInstanceProfile.Arn
        KeyName: !Ref KeyName
        ImageId: ami-00f34bf9aeacdf007
        SecurityGroupIds:
          - !Ref InstanceSecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            yum install -y httpd amazon-cloudwatch-agent
            systemctl start httpd
            systemctl enable httpd
            echo '<html><body style="background-color:lightgreen;"><h1 style="color:#1b1b1b;text-align:center;margin-top:20%;">Hello from the Native Observability in AWS presentation</h1></body></html>' > /var/www/html/index.html

            cat <<EOC > /opt/aws/amazon-cloudwatch-agent/bin/config.json
            {
              "logs": {
                "logs_collected": {
                  "files": {
                    "collect_list": [
                      {
                        "file_path": "/var/log/httpd/access_log",
                        "log_group_name": "/observability/httpd/access",
                        "log_stream_name": "{instance_id}"
                      }
                    ]
                  }
                }
              }
            }
            EOC

            /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
              -a fetch-config \
              -m ec2 \
              -c file:/opt/aws/amazon-cloudwatch-agent/bin/config.json \
              -s

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref DefaultSubnets
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: '1'
      MaxSize: '1'
      DesiredCapacity: '1'
      TargetGroupARNs:
        - !Ref ALBTargetGroup

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: ObservabilityALB
      Subnets: !Ref DefaultSubnets
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Scheme: internet-facing
      Type: application

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref DefaultVPC
      Port: 80
      Protocol: HTTP
      TargetType: instance
      HealthCheckPath: /
      Matcher:
        HttpCode: 200

Outputs:
  ALBURL:
    Description: Access your demo web app here
    Value: !Sub "http://${ALB.DNSName}"
